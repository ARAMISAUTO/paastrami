<?php

namespace AramisAuto\Paastrami\Console\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\Process;

class HostBindProxyCommand extends Command
{
    protected function configure()
    {
        $this
            ->setName('host:bind-proxy')
            ->setDescription('Génération de la configuration Bind et Apache d\'un environnement')
            ->addArgument('platform', InputArgument::REQUIRED, 'Nom de la plateforme')
            ->addArgument('environment', InputArgument::REQUIRED, 'Nom de l\'environnement')
            ->addOption('domain', null, InputOption::VALUE_REQUIRED, 'Domaine', 'localhost.localdomain')
            ->addOption('working-directory', null, InputOption::VALUE_REQUIRED, 'Répertoire de travail', '.')
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        // Sanity checks
        $envFile =sprintf(
            '%s/platforms/%s/environments/%s/etc/paastrami/paastrami.json',
            $input->getOption('working-directory'),
            $input->getArgument('platform'),
            $input->getArgument('environment')
        );
        if (!is_readable($envFile)) {
            throw new \RuntimeException('Could not read paastrami.json');
        }

        // Environment specification
        $env = json_decode(file_get_contents($envFile), true);

        // Create Bind configuration
        $this->doBind($env['name'], $env['platform'], $input->getOption('domain'), array_keys($env['sites']));

        // Create Apache configuration
        $this->doApache($env['name'], $env['platform'], $input->getOption('domain'), $env['vms'][0]['ip']);
    }

    private function doBind($environment, $platform, $domain, array $sites)
    {
        // Host IP
        $ip = trim(shell_exec("ip route get 8.8.8.8 | awk '{ print \$NF; exit }'"));

        // DNS serial
        $serial = date('YmdH');

        // DNS Zone
        $dnsZone = <<<EOT
zone "${environment}.${platform}.${domain}" in{
    type master;
    file "/etc/bind/db.${domain}.${platform}.${environment}";
};
EOT;

        // DNS DB
        $dnsDb = <<<EOT
\$TTL 5m
\$ORIGIN ${environment}.${platform}.${domain}.
@     IN    SOA    ns1.${environment}.${platform}.${domain}. hostmaster.${environment}.${platform}.${domain} ( ${serial} 2 15 3 2 )
      IN    NS     ns1.${environment}.${platform}.${domain}.
EOT;
        foreach ($sites as $site) {
            $dnsDb .= sprintf("\n%s    IN    A    %s", $site, $ip);
        }

        // DNS local
        $dnsLocal = file('/etc/bind/named.conf.local');
        $dnsLocal[] = sprintf('include "/etc/bind/zones.%s.%s.%s";', $domain, $platform, $environment);
        $dnsLocal = array_unique($dnsLocal);

        // Write Bind configuration
        file_put_contents(sprintf('/etc/bind/zones.%s.%s.%s', $domain, $platform, $environment), $dnsZone);
        file_put_contents(sprintf('/etc/bind/db.%s.%s.%s', $domain, $platform, $environment), $dnsZone);
        file_put_contents('/etc/bind/named.conf.local', implode("\n", $dnsLocal));

        // Restart Bind
        $process = new Process('service bind9 restart');
        $process->run();
        if (!$process->isSuccessful()) {
            throw new \RuntimeException($process->getErrorOutput());
        }

        // Networking configuration
        $resolvconf = file_get_contents('/etc/resolvconf/resolv.conf.d/tail');
        if (!preg_match(sprintf('/nameserver %s/', preg_quote($ip)), $resolvconf)) {
            $resolvconf .= "\nnameserver ${ip}";
            file_put_contents('/etc/resolvconf/resolv.conf.d/tail', $resolvconf);
            $process = new Process('service networking restart');
            $process->run();
            if (!$process->isSuccessful()) {
                throw new \RuntimeException($process->getErrorOutput());
            }
        }
    }

    private function doApache($environment, $platform, $domain, $ipEntrypoint)
    {
        $conf = <<<EOT
<VirtualHost *:80>
  ServerName ${environment}.${platform}.${domain}
  ServerAlias *.${environment}.${platform}.${domain}

  ProxyPass / http://${ipEntrypoint}/
  ProxyPassReverse / http://${ipEntrypoint}/
  ProxyPreserveHost On
</VirtualHost>
EOT;

        file_put_contents(
            sprintf('/etc/apache2/sites-available/%s.%s.%s.conf', $environment, $platform, $domain),
            $conf
        );

        $commands = array('a2ensite '.sprintf('%s.%s.%s', $environment, $platform, $domain), 'service apache2 reload');
        foreach ($commands as $command) {
            $process = new Process($command);
            $process->run();
            if (!$process->isSuccessful()) {
                throw new \RuntimeException($process->getErrorOutput());
            }
        }
    }
}
